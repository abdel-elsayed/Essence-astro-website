---
import '../styles/global.css';
import SiteHeader from '../components/SiteHeader.astro';
import SiteFooter from '../components/SiteFooter.astro';
import { business, siteMeta } from '../data/site';

interface Props {
  title?: string;
  description?: string;
  structuredData?: Record<string, unknown> | Record<string, unknown>[];
  canonical?: string;
  noIndex?: boolean;
  currentPath?: string;
}

const {
  title = `${business.name} | Med Spa in Chicago, IL`,
  description = business.description,
  structuredData,
  canonical,
  noIndex = false,
  currentPath = Astro.url.pathname
} = Astro.props as Props;
---
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <meta name="description" content={description} />
    {noIndex && <meta name="robots" content="noindex, nofollow" />}
    {canonical && <link rel="canonical" href={canonical} />}
    <meta property="og:site_name" content={business.name} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    {canonical && <meta property="og:url" content={canonical} />}
    <meta name="theme-color" content={siteMeta.brandColor} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@600;700&display=swap"
      rel="stylesheet"
    />
    <slot name="head" />
    {structuredData && (
      <script type="application/ld+json" is:inline>
        {JSON.stringify(structuredData)}
      </script>
    )}
  </head>
  <body class="page-transition">
    <SiteHeader currentPath={currentPath} />
    <main>
      <slot />
    </main>
    <SiteFooter />

    <script is:inline>
      const body = document.body;
      const enter = () => {
        body.classList.add('is-loaded');
        body.classList.remove('is-leaving');
      };

      if (document.readyState === 'complete') {
        enter();
      } else {
        window.addEventListener('DOMContentLoaded', enter, { once: true });
      }

      window.addEventListener('pageshow', (event) => {
        if (event.persisted) enter();
      });

      document.addEventListener('click', (event) => {
        const link = event.target.closest('a');
        if (!link) return;

        if (
          link.target === '_blank' ||
          event.metaKey ||
          event.ctrlKey ||
          event.shiftKey ||
          event.altKey
        ) {
          return;
        }

        const href = link.getAttribute('href');
        if (!href) return;
        if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('tel:')) return;
        if (link.hasAttribute('download') || link.getAttribute('rel')?.includes('external')) return;

        const url = new URL(link.href, window.location.href);
        if (url.origin !== window.location.origin) return;
        if (url.pathname === window.location.pathname && url.search === window.location.search) return;
        if (link.hasAttribute('data-no-transition')) return;

        event.preventDefault();
        body.classList.add('is-leaving');
        setTimeout(() => {
          window.location.href = link.href;
        }, 180);
      });
    </script>
  </body>
</html>
